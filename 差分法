import torch
import numpy as np
import matplotlib.pyplot as plt
import time

def f(x,y):#微分方程的右边函数f
    return -(y**3 + 6*y + x - 2)*np.exp(-x)
def u_acc(x,y):
    return (x + y**3)*np.exp(-x)
def u_bou(x,y):
    return u_acc(x,y)


xa,xb = 0,1
ya,yb = 0,1
class TESET():
    def __init__(self):
        self.xa,self.xb = xa,xb
        self.ya,self.yb = ya,yb
        self.hx = 0.1
        self.hy = 0.1
        self.nx = int((self.xb - self.xa)/self.hx) + 1
        self.ny = int((self.yb - self.ya)/self.hy) + 1
        self.size = self.nx*self.ny
        self.X = torch.zeros(self.size,2)
        for j in range(self.ny):
            for i in range(self.nx):
                self.X[j*self.nx + i,0] = self.xa + i*self.hx
                self.X[j*self.nx + i,1] = self.ya + j*self.hy
        self.right = f(self.X[:,0],self.X[:,1]).view(-1,1)
        self.u_acc = u_acc(self.X[:,0],self.X[:,1]).view(-1,1)
        self.ub = u_bou(self.X[:,0],self.X[:,1]).view(-1,1)
teset = TESET()
M,N = teset.nx,teset.ny
x_train = np.linspace(teset.xa,teset.xb,M)
y_train = np.linspace(teset.ya,teset.yb,N)
r = teset.hx/teset.hy
#up = torch.zeros(N*M,1)
b = torch.zeros(N*M,1)
A = torch.zeros(N*M,N*M)
print('N = {},M = {}'.format(N,M))
for i in range(1,M - 1):
    for j in range(1,N - 1):
        A[i*N + j,i*N + j - 1] = r**2
        A[i*N + j,(i - 1)*N + j - 1] = 1
        A[i*N + j,i*N + j] = -(2 + 2*r**2)
        A[i*N + j,(i + 1)*N + j] = 1
        A[i*N + j,i*N + j + 1] = r**2
        b[i*N + j,0] = -(teset.hx**2)*f(x_train[i],y_train[j])
for j in range(N):
    A[j,j] = 1
    A[j + (M - 1)*N,j + (M - 1)*N] = 1
    b[j,0] = u_bou(x_train[0],y_train[j])
    b[j + (M - 1)*N,0] = u_bou(x_train[-1],y_train[j])
for i in  range(M):
    for j in range(N):
        if (i*N + j)%N == 0 or (i*N + j)%N == (N - 1):
            A[i*N + j,i*N + j] = 1
            b[i*N + j,0] = u_bou(x_train[i],y_train[j])
AT = np.linalg.inv(A.numpy())
b = b.numpy()
up = np.dot(AT,b).reshape(M,N).T

x,y = np.meshgrid(x_train,y_train)
plt.contourf(x,y,up,40,cmap = 'Blues')
plt.colorbar()
plt.xlabel('x')
plt.ylabel('y')
plt.title('the FD solution')
plt.savefig('FD.jpg')

x,y = np.meshgrid(x_train,y_train)
u = teset.u_acc.view(N,M)
plt.contourf(x,y,u,40,cmap = 'Blues')
plt.colorbar()
plt.xlabel('x')
plt.ylabel('y')
plt.title('the acc solution')
